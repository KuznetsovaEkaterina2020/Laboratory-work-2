// Шаблоны (лабораторная работа 2)
// Кузнецова Е.А. Шалыгина А.В.

#include <iostream>
using namespace std;

struct Node // структура звена списка
{
	int x; // поле данных
	Node* next, * prev, * pick;
};

class List // класс "список"
{
	Node* start, * end; // указатели на начало и конец списка
public:
	List() :start(NULL), end(NULL) {}; // инициализация адресов
	~List(); // прототипы деструктора и функций
	void Init(int a); // инициализация первого элемента
	void Put(int n); // добавление элемента в список
	void Del(Node* a); // удаление элемента из списка
	void Show(); // вывод элементов
};

List::~List() // деструктор класса
{
	while (start)
	{
		end = start->next;
		delete start;
		start = end;
	}
}

void List::Init(int a) // инициализация первого элемента
{
	Node* pick;
	pick = (struct Node*)malloc(sizeof(Node)); // выделение памяти под корень списка
	pick->x = a;
	pick->next = nullptr; // указатель на следующий узел
	pick->prev = nullptr; // указатель на предыдущий узел
}

void List::Put(int n) // добавление элемента в список
{
	Node* pick = new Node; // выделение памяти под новый элемент структуры
	pick->next = NULL; // указатель на следующий пустой адрес
	pick->x = n; // запись значения в структуру
	if (start != NULL)                    //Если список не пуст
	{
		pick->prev = end; // указатель на предыдущий элемент
		end->next = pick; // указатель на следующий элемент
		end = pick; // смена адреса конца списка
	}
	else
	{
		pick->prev = NULL; 
		start = end = pick;
	}
}

void List::Del(Node * a) // удаление элемента из списка
{
	Node* n, * p;
	p = a->prev; // элемент, предшествующий a
	n = a->next; // элемент, следующий за a
	if (p != NULL)
		p->next = a->next; // перестановка указателя
	if (n != NULL)
		n->prev = a->prev; // перестановка указателя
	free(a); // освобождение памяти удаляемого элемента
}

void List::Show() // вывод элементов
{
	// список выводится с начала
	Node* pick = start; // временный указатель на адрес первого элемента
    while (pick != NULL) // до первого пустого значения
    {
        cout << pick->x << " "; // вывод значения на экран
		pick = pick->next; //смена адреса на адрес следующего элемента
    }
    cout << endl;
	// список выводится с конца
	pick = end; // временный указатель на адрес первого элемента
    while (pick != NULL) // до первого пустого значения
    {
        cout << pick->x << " "; // вывод значения на экран
		pick = pick->prev; //смена адреса на адрес предыдущего элемента
    }
    cout << endl;
}

int main() // основная функция программы
{
    List p1; // объявление новой переменной в списке
	  p1.Put(357); p1.Put(95); p1.Put(14); // добавление элементов в список
    p1.Show(); // вывод списка на экран
    return 0;
}
